name: Build and Deploy Conductor to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_ID: i-0f3825346d84a197a

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::867344440197:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2 via SSM
        run: |
          COMMANDS_JSON=$(cat <<'EOF'
          {
            "commands": [
              "#!/bin/bash",
              "set -e",
              
              "echo '=== CLEANING UP ==='",
              "docker stop $(docker ps -aq) 2>/dev/null || true",
              "docker rm $(docker ps -aq) 2>/dev/null || true",
              "docker system prune -af --volumes",
              "docker network rm conductor-dev-net 2>/dev/null || true",
              
              "echo '=== CREATING NETWORK ==='",
              "docker network create conductor-dev-net",
              
              "echo '=== CLONING REPOSITORY ==='",
              "cd /home/ec2-user",
              "rm -rf netflix_conductor",
              "git clone https://github.com/mathiyarasuc/netflix_conductor.git",
              "cd netflix_conductor",
              
              "echo '=== STARTING INFRASTRUCTURE ==='",
              "docker run -d --name redis --network conductor-dev-net -p 6379:6379 --restart always -v redis-data:/data --health-cmd='redis-cli ping || exit 1' --health-interval=30s --health-timeout=5s --health-retries=3 redis:6.2-alpine",
              
              "docker run -d --name elasticsearch --network conductor-dev-net -p 9200:9200 -p 9300:9300 -e 'ES_JAVA_OPTS=-Xms512m -Xmx1024m' -e 'discovery.type=single-node' -e 'xpack.security.enabled=false' -v elasticsearch-data:/usr/share/elasticsearch/data --restart always --health-cmd='curl -f http://localhost:9200/_cluster/health || exit 1' --health-interval=30s --health-timeout=10s --health-retries=5 --health-start-period=60s elasticsearch:7.17.9",
              
              "docker run -d --name nats --network conductor-dev-net -p 4222:4222 -p 8222:8222 --restart always nats:latest -js --http_port 8222",
              
              "docker run -d --name nats-streaming --network conductor-dev-net -p 4223:4222 -p 8223:8222 --restart always nats-streaming:latest -m 8222",
              
              "sleep 45",
              
              "echo '=== STARTING CONDUCTOR ==='",
              "docker run -d --name conductor-server --network conductor-dev-net -p 8080:8080 -p 8090:8090 --restart always -e CONFIG_PROP=config-local.properties --health-cmd='curl -f http://localhost:8080/health || exit 1' --health-interval=30s --health-timeout=15s --health-retries=5 --health-start-period=90s niemen/conductor-server:7.2.2",
              
              "docker run -d --name conductor-ui --network conductor-dev-net -p 5000:5000 -e WF_SERVER=http://conductor-server:8080 --restart always --health-cmd='wget --no-verbose --tries=1 --spider http://localhost:5000/ || exit 1' --health-interval=30s niemen/conductor-ui:4.0.1",
              
              "sleep 30",
              
              "echo '=== BUILDING CUSTOM SERVICES ==='",
              "docker build --quiet -t flask-server:latest ./tool_executor",
              "docker build --quiet -t gql-bff:latest ./gql-bff",
              "docker build --quiet -t react-ui:latest --build-arg REACT_APP_THEME=default --build-arg REACT_APP_VERSION=0.0.0 --build-arg REACT_APP_GQL=atlas-gql.enowclear360.com --build-arg REACT_APP_GQL_HTTP_PROTOCOL=https --build-arg REACT_APP_GQL_WS_PROTOCOL=wss --build-arg REACT_APP_USE_NBB_MESSAGE=true ./react-ui",
              
              "echo '=== STARTING CUSTOM SERVICES ==='",
              "docker run -d --name flask-server --network conductor-dev-net -p 7000:7000 --restart always flask-server:latest",
              
              "docker run -d --name gql-bff --network conductor-dev-net -p 5001:5000 -e NODE_ENV=production -e PORT=5000 --add-host host.docker.internal:172.17.0.1 --restart always --entrypoint sh gql-bff:latest -c 'sleep 60 && yarn start'",
              
              "docker run -d --name react-ui --network conductor-dev-net -p 3001:80 --restart always react-ui:latest",
              
              "sleep 30",
              
              "echo '=== DEPLOYMENT COMPLETE ==='",
              "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
            ]
          }
          EOF
          )

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=InstanceIds,Values=${{ env.EC2_INSTANCE_ID }}" \
            --parameters "$COMMANDS_JSON" \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          echo "Waiting for deployment..."
          for i in {1..40}; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ env.EC2_INSTANCE_ID }}" \
              --region ${{ env.AWS_REGION }} \
              --query 'CommandInvocations[0].Status' \
              --output text)
            
            echo "Status: $STATUS"
            
            if [[ "$STATUS" == "Success" ]]; then
              echo "✅ DEPLOYMENT SUCCESS"
              exit 0
            elif [[ "$STATUS" == "Failed" ]]; then
              echo "❌ DEPLOYMENT FAILED"
              exit 1
            fi
            
            sleep 15
          done